openapi: '3.0.3'
info:
  title: API Title
  version: '1.0'
servers:
  - url: http://localhost:3610/v1
tags:
  - name: Users 👤
    description: Endpoints for managing users, including user creation, retrieval, and updates.
  - name: Articles 📰
    description: Endpoints for managing articles, including article creation, retrieval, and updates.
  - name: Likes 👍
    description: Endpoints for managing likes.
security:
  - bearerAuth: []
paths:
  /users/register:
    post:
      tags:
        - Users 👤
      security: []
      summary: Create a new user
      description: This endpoint creates a new user with the provided name, email, password, and biography.
      x-eov-operation-handler: userController
      operationId: create
      requestBody:
        $ref: '#/components/requestBodies/PostRegisterRequestBody'
      responses:
        201:
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating successful operation.
                    default: 201
                  message:
                    type: string
                    description: Descriptive message of the operation.
                    default: Created
                  data:
                    $ref: '#/components/schemas/User'
                additionalProperties: false
                required:
                  - statusCode
                  - message
                  - data
        400:
          $ref: '#/components/responses/BadRequest'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/login:
    post:
      tags:
        - Users 👤
      security: []
      summary: Log in a user
      description: This endpoint authenticates a user with the provided email and password, returning a JWT token if successful.
      x-eov-operation-handler: userController
      operationId: login
      requestBody:
        $ref: '#/components/requestBodies/PostLoginRequestBody'
      responses:
        200:
          description: User successfully logged
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating successful operation.
                    default: 200
                  message:
                    type: string
                    description: Descriptive message of the operation.
                    default: OK
                  data:
                    description: JWT token used for authentication.
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                additionalProperties: false
                required:
                  - statusCode
                  - message
                  - data
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users:
    get:
      tags:
        - Users 👤
      summary: Retrieve a list of users
      description: Fetches a paginated list of users registered in the platform. You can use filters like search terms, pagination, and ordering to refine the results.
      x-eov-operation-handler: userController
      operationId: findAndCountAll
      parameters:
        - name: page
          in: query
          description: The page number for pagination.
          required: false
          schema:
            type: integer
            format: int64
            default: 1
        - name: limit
          in: query
          description: The limit of results per page.
          required: false
          schema:
            type: integer
            format: int64
            default: 20
        - name: find
          in: query
          description: A search term to filter results.
          required: false
          schema:
            type: string
            default: ''
          allowReserved: true
        - name: order
          in: query
          description: >
            Order of the results:

              - `a-z` - Order by name ascending. From A to Z
              - `z-a` - Order by name descending. From Z to A
          required: false
          schema:
            type: string
            enum:
              - a-z
              - z-a
            default: a-z
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating a successful operation.
                    default: 200
                  message:
                    type: string
                    description: Descriptive message of the operation.
                    default: OK
                  count:
                    type: integer
                    format: int64
                    description: The total number of users found.
                    default: 1
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                required:
                  - statusCode
                  - message
                  - count
                  - data
                additionalProperties: false
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}:
    get:
      tags:
        - Users 👤
      summary: Retrieve a specific user by their ID
      description: |
        This endpoint retrieves detailed information about a user based on the provided user ID. It returns the user's
        profile data, including their name, email, and biography, if found.

        If the user does not exist, an appropriate error message will be returned.
      x-eov-operation-handler: userController
      operationId: findById
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the user you want to retrieve.
          required: true
          schema:
            type: string
            format: uuid
            example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        200:
          description: User successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating successful operation.
                    default: 200
                  message:
                    type: string
                    description: Descriptive message of the operation.
                    default: OK
                  data:
                    $ref: '#/components/schemas/User'
                additionalProperties: false
                required:
                  - statusCode
                  - message
                  - data
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Users 👤
      summary: Update a user
      description: This endpoint updates the details of an existing user based on the provided user ID.
      x-eov-operation-handler: userController
      operationId: update
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the user to update.
          required: true
          schema:
            type: string
            example: 550e8400-e29b-41d4-a716-446655440000
      requestBody:
        $ref: '#/components/requestBodies/PutUserRequestBody'
      responses:
        200:
          description: User successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating successful operation.
                    default: 200
                  message:
                    type: string
                    description: Descriptive message of the operation.
                    default: OK
                  data:
                    $ref: '#/components/schemas/User'
                additionalProperties: false
                required:
                  - statusCode
                  - message
                  - data
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Users 👤
      summary: Delete a user by ID
      description: This endpoint deletes a user specified.
      x-eov-operation-handler: userController
      operationId: deleteById
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the user to be deleted.
          required: true
          schema:
            type: string
            example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        200:
          $ref: '#/components/responses/Ok'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/articles:
    post:
      tags:
        - Articles 📰
      summary: Create a new article
      description: This endpoint creates a new article with the provided title, content, and optional image.
      x-eov-operation-handler: articleController
      operationId: create
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the user.
          required: true
          schema:
            type: string
            example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      requestBody:
        $ref: '#/components/requestBodies/PostArticleRequestBody'
      responses:
        201:
          description: Article successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating successful operation.
                    default: 201
                  message:
                    type: string
                    description: Descriptive message of the operation.
                    default: Created
                  data:
                    $ref: '#/components/schemas/Article'
                additionalProperties: false
                required:
                  - statusCode
                  - message
                  - data
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/articles:
    get:
      tags:
        - Articles 📰
      summary: Retrieve a list of articles
      description: >
        Fetches a paginated list of articles created in the platform. You can use filters like search terms,
        pagination, and ordering to refine the results.
      x-eov-operation-handler: articleController
      operationId: findAndCountAll
      parameters:
        - name: userId
          in: query
          description: The unique identifier of the user.
          required: false
          schema:
            type: string
            example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        - name: page
          in: query
          description: The page number for pagination.
          required: false
          schema:
            type: integer
            format: int64
            default: 1
        - name: limit
          in: query
          description: The limit of results per page.
          required: false
          schema:
            type: integer
            format: int64
            default: 20
        - name: find
          in: query
          description: A search term to filter results.
          required: false
          schema:
            type: string
            default: ''
          allowReserved: true
        - name: order
          in: query
          description: >
            Order of the results:

              - `a-z` - Order by title ascending. From A to Z
              - `z-a` - Order by title descending. From Z to A
          required: false
          schema:
            type: string
            enum:
              - a-z
              - z-a
            default: a-z
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating a successful operation.
                    default: 200
                  message:
                    type: string
                    description: Descriptive message of the operation.
                    default: OK
                  count:
                    type: integer
                    format: int64
                    description: The total number of articles found.
                    default: 1
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                required:
                  - statusCode
                  - message
                  - count
                  - data
                additionalProperties: false
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/articles/{articleId}:
    get:
      tags:
        - Articles 📰
      summary: Retrieve a specific article by its ID for a specific user
      description: |
        This endpoint retrieves detailed information about an article based on the provided user ID and article ID.
        It returns the article's title, content, and associated metadata, if found.

        If the article or user does not exist, an appropriate error message will be returned.
      x-eov-operation-handler: articleController
      operationId: findByUserIdAndArticleId
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the user.
          required: true
          schema:
            type: string
            format: uuid
            example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        - name: articleId
          in: path
          description: The unique identifier of the article.
          required: true
          schema:
            type: string
            format: uuid
            example: 7cb1d2a5-8c7b-4f3b-a545-2fd938c70c7f
      responses:
        200:
          description: Article successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating successful operation.
                    default: 200
                  message:
                    type: string
                    description: Descriptive message of the operation.
                    default: OK
                  data:
                    $ref: '#/components/schemas/Article'
                additionalProperties: false
                required:
                  - statusCode
                  - message
                  - data
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Articles 📰
      summary: Update a specific article for a specific user
      description: |
        This endpoint updates an existing article based on the provided user ID and article ID.
        The request body should include the fields that need to be updated, such as the title, content, or image.

        If the article or user does not exist, an appropriate error message will be returned.
      x-eov-operation-handler: articleController
      operationId: updateByUserIdAndArticleId
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the user.
          required: true
          schema:
            type: string
            format: uuid
            example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        - name: articleId
          in: path
          description: The unique identifier of the article.
          required: true
          schema:
            type: string
            format: uuid
            example: 7cb1d2a5-8c7b-4f3b-a545-2fd938c70c7f
      requestBody:
        $ref: '#/components/requestBodies/PutArticleRequestBody'
      responses:
        200:
          description: Article successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating successful operation.
                    default: 200
                  message:
                    type: string
                    description: Descriptive message of the operation.
                    default: Updated
                  data:
                    $ref: '#/components/schemas/Article'
                additionalProperties: false
                required:
                  - statusCode
                  - message
                  - data
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Articles 📰
      summary: Delete a specific article for a specific user
      description: |
        This endpoint deletes an existing article based on the provided user ID and article ID.

        If the article or user does not exist, an appropriate error message will be returned.
      x-eov-operation-handler: articleController
      operationId: deleteByUserIdAndArticleId
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the user.
          required: true
          schema:
            type: string
            format: uuid
            example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        - name: articleId
          in: path
          description: The unique identifier of the article.
          required: true
          schema:
            type: string
            format: uuid
            example: 7cb1d2a5-8c7b-4f3b-a545-2fd938c70c7f
      responses:
        200:
          $ref: '#/components/responses/Ok'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/likes:
    post:
      tags:
        - Likes 👍
      summary: Like an article
      description: Allows a user to like a specific article.
      x-eov-operation-handler: likeController
      operationId: create
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the user.
          required: true
          schema:
            type: string
            format: uuid
            example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                articleId:
                  type: string
                  format: uuid
                  description: The unique identifier of the article to be liked.
                  example: '7cb1d2a5-8c7b-4f3b-a545-2fd938c70c7f'
              required:
                - articleId
              additionalProperties: false
      responses:
        201:
          description: Like successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating successful operation.
                    default: 201
                  message:
                    type: string
                    description: Descriptive message of the operation.
                    default: Created
                  data:
                    $ref: '#/components/schemas/Like'
                additionalProperties: false
                required:
                  - statusCode
                  - message
                  - data
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/likes/{likeId}:
    delete:
      tags:
        - Likes 👍
      summary: Remove a like from an article
      description: Allows a user to remove their like from a specific article using the like ID.
      x-eov-operation-handler: likeController
      operationId: deleteById
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the user.
          required: true
          schema:
            type: string
            format: uuid
            example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        - name: likeId
          in: path
          description: The unique identifier of the like to be removed.
          required: true
          schema:
            type: string
            format: uuid
            example: '7cb1d2a5-8c7b-4f3b-a545-2fd938c70c7f'
      responses:
        200:
          $ref: '#/components/responses/Ok'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: |
            The unique identifier for the account, represented as a UUID (Universally Unique Identifier).
            This ID is automatically generated when the account is created.
          example: 550e8400-e29b-41d4-a716-446655440000
        createdAt:
          type: string
          format: date-time
          description: |
            The date and time when the account was created. It is stored in ISO 8601 format (e.g., `2024-10-04T12:35:43.030Z`).
          example: 2024-10-04T12:35:43.030Z
        updatedAt:
          type: string
          format: date-time
          description: |
            The date and time when the account was last updated. It is stored in ISO 8601 format (e.g., `2024-10-04T12:35:43.030Z`).
          example: 2024-10-04T12:35:43.030Z
        name:
          type: string
          description: The name of the user.
          example: John Doe
        email:
          type: string
          description: The email address of the user.
          example: john.doe@example.com
        biography:
          type: string
          description: A short biography of the user.
          example: A software developer from California.
        articles:
          type: integer
          description: The number of the user's articles
          example: 10
      additionalProperties: false
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - email
        - biography
        - articles

    Article:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the article.
          example: 550e8400-e29b-41d4-a716-446655440000
        title:
          type: string
          description: Title of the article.
        content:
          type: string
          description: Main content of the article.
        image:
          type: string
          description: URL of the article image.
        userId:
          type: string
          format: uuid
          description: ID of the user who created the article.
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the article was created.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the article was last updated.
        likes:
          type: integer
          description: Number of likes the article has received.
          example: 10
      additionalProperties: false
      required:
        - id
        - title
        - content
        - userId
        - createdAt
        - updatedAt
        - likes

    Like:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the like.
          example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
        userId:
          type: string
          format: uuid
          description: The unique identifier of the user who liked the article.
          example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
        articleId:
          type: string
          format: uuid
          description: The unique identifier of the article that was liked.
          example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the like was created.
          example: '2024-11-03T12:34:56Z'
        updatedAt:
          type: string
          format: date-time
          description: The timestamp when the like was last updated.
          example: '2024-11-03T12:34:56Z'
      required:
        - id
        - userId
        - articleId
        - createdAt
        - updatedAt

  requestBodies:
    PostRegisterRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: The name of the user.
                example: John Doe
              email:
                type: string
                description: The email address of the user.
                example: john.doe@example.com
              password:
                type: string
                description: The password for the user account.
                example: P@ssw0rd!
              biography:
                type: string
                description: A short biography of the user.
                example: A software developer from California.
            required:
              - name
              - email
              - password
            additionalProperties: false

    PostLoginRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                description: The email address of the user.
                example: john.doe@example.com
              password:
                type: string
                description: The password for the user account.
                example: P@ssw0rd!
            required:
              - email
              - password
            additionalProperties: false

    PutUserRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: The name of the user.
                example: John Doe
              biography:
                type: string
                description: A short biography of the user.
                example: A software developer from California.
            additionalProperties: false

    PostArticleRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: The title of the article.
                example: 'Introduction to Sequelize'
              content:
                type: string
                description: The main content of the article.
                example: 'Sequelize is a Node.js ORM...'
              image:
                type: string
                description: URL to an image related to the article.
                example: 'https://example.com/image.jpg'
            required:
              - title
              - content
            additionalProperties: false

    PutArticleRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: The updated title of the article.
                example: Updated Article Title
              content:
                type: string
                description: The updated content of the article.
                example: This is the updated content of the article.
              image:
                type: string
                description: Optional updated image URL for the article.
                example: https://example.com/updated-image.jpg
            additionalProperties: false

  responses:
    Ok:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int64
                description: HTTP status code indicating a successful request.
                default: 200
              message:
                type: string
                description: Descriptive message indicating successful operation.
                default: OK
              data:
                type: object
                description: Additional data returned with the response, if applicable.
            required:
              - statusCode
              - message
            additionalProperties: false

    Created:
      description: Created
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int64
                description: HTTP status code indicating a resource was successfully created.
                default: 201
              message:
                type: string
                description: Descriptive message indicating successful creation.
                default: Resource created successfully.
            required:
              - statusCode
              - message
            additionalProperties: false

    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int64
                description: HTTP status code indicating a bad request error.
                default: 400
              message:
                type: string
                description: Descriptive message of the error.
                default: Bad Request
              errorCode:
                type: string
                enum:
                  - BAD_REQUEST
                description: >
                  Possible error codes:

                  - `BAD_REQUEST`: Indicates a bad request error.'
            required:
              - statusCode
              - message
              - errorCode
            additionalProperties: false

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int64
                description: HTTP status code indicating an unauthorized error.
                default: 401
              message:
                type: string
                description: Descriptive message of the error.
                default: Unauthorized
              errorCode:
                type: string
                enum:
                  - UNAUTHORIZED
                description: >
                  Possible error codes:

                  - `UNAUTHORIZED`: Indicates an unauthorized error.'
            required:
              - statusCode
              - message
              - errorCode
            additionalProperties: false

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int64
                description: HTTP status code indicating a forbidden error.
                default: 403
              message:
                type: string
                description: Descriptive message of the error.
                default: Forbidden
              errorCode:
                type: string
                enum:
                  - FORBIDDEN
                description: >
                  Possible error codes:

                  - `FORBIDDEN`: Indicates a forbidden error.'
            required:
              - statusCode
              - message
              - errorCode
            additionalProperties: false

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int64
                description: HTTP status code indicating a not found error.
                default: 404
              message:
                type: string
                description: Descriptive message of the error.
                default: Not Found
              errorCode:
                type: string
                enum:
                  - NOT_FOUND
                  - USER_NOT_FOUND
                description: >
                  Possible error codes:

                  - `NOT_FOUND`: Indicates a not found error.'
            required:
              - statusCode
              - message
              - errorCode
            additionalProperties: false

    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int64
                description: HTTP status code indicating a conflict error.
                default: 409
              message:
                type: string
                description: Descriptive message of the error.
                default: Conflict
              errorCode:
                type: string
                enum:
                  - CONFLICT
                description: >
                  Possible error codes:

                  - `CONFLICT`: Indicates a conflict error.'
            required:
              - statusCode
              - message
              - errorCode
            additionalProperties: false

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int64
                description: HTTP status code indicating an error.
                default: 500
              message:
                type: string
                description: Descriptive message of the error.
                default: Internal Server Error
              errorCode:
                type: string
                enum:
                  - INTERNAL_SERVER_ERROR
                description: >
                  Possible error codes:

                  - `INTERNAL_SERVER_ERROR`: Indicates an error.'
            required:
              - statusCode
              - message
              - errorCode
            additionalProperties: false
